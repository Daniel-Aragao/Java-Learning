package they.game;

import input.KeyManager;

import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.image.BufferStrategy;

import states.GameState;
import states.MenuState;
import states.State;
import they.display.Display;
import they.graphics.Assets;

public class Game implements Runnable {
	private Display display;
	private Dimension dim;
	private int width, height;
	private String title;

	private Thread thread;
	private boolean gameLoop = false;

	private BufferStrategy bs;
	private Graphics g;
	
	//Input
	private KeyManager keyManager;

	//States
	private State gameState;
	private State menuState;
	
	public Game(String title, Dimension dim) {
		this.dim = dim;
		width = dim.width;
		height = dim.height;
		this.title = title;
		this.keyManager = new KeyManager();
	}

	private void init() {
		display = new Display(title, dim);
		display.getFrame().addKeyListener(keyManager);
		Assets.init();
		
		gameState = new GameState(this);
		menuState = new MenuState(this);
		State.setState(gameState);
	}

	
	private void tick() { // tick or update
		keyManager.update();
		
		if(State.getState()!=null){
			State.getState().update();
		}
	}

	private void render() {
		bs = display.getCanvas().getBufferStrategy();
		if (bs == null) {
			display.getCanvas().createBufferStrategy(3);
			return;
		}
		g = bs.getDrawGraphics();
		// Clear Screen
		g.clearRect(0, 0, dim.width, dim.height);
		// Draw Here!

		if(State.getState()!=null){
			State.getState().draw(g);
		}

		// End Drawing!
		bs.show();
		g.dispose();
	}

	// Game Loop => update all variables, positions of objects, etc. =>
	// render(draw) everything to the screen and then star over
	public void run() {
		init();

		int fps = 60;
		double targetTime = 1000000000 / fps;
		double delta = 0;
		long currentTime;
		long lastTime = System.nanoTime();
		long timer = 0;
		int frames = 0;

		while (gameLoop) {
			currentTime = System.nanoTime();
			delta += (currentTime - lastTime) / targetTime;
			timer += currentTime - lastTime;
			lastTime = currentTime;

			if (delta >= 1) {
				tick();
				render();
				frames++;
				delta--;
			}
			if(timer>=1000000000){
				System.out.println("FPS:"+frames);
				frames = 0;
				timer = 0;
			}
		}

		stop();

	}
	
	public KeyManager getKeyManage(){return keyManager;}

	public synchronized void start() {
		if (gameLoop) {
			return;
		}
		gameLoop = true;
		thread = new Thread(this);
		thread.start();
	}

	public synchronized void stop() {
		if (!gameLoop)
			return;
		gameLoop = false;
		try {
			thread.join();
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
}
